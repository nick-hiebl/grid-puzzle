{"version":3,"sources":["api/puzzle/Puzzle.ts","components/puzzle/PuzzleComponent.tsx","pages/days/day1.tsx","pages/days/day2.tsx","pages/days/index.tsx","pages/homepage/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Puzzle","details","n","state","colCounts","rowCounts","totalActive","this","enabled","Array","fill","complete","undefined","reduce","a","b","every","count","index","filter","_","subIndex","slice","i","j","status","newState","isValid","CHECKED_IMAGES","map","s","process","UNCHECKED_IMAGES","concat","image","Image","src","randomImage","checked","Math","floor","random","length","Button","props","onToggle","useState","img","setImage","setEnabled","useEffect","onClick","useCallback","style","border","backgroundImage","backgroundColor","backgroundSize","padding","ButtonContainer","display","gridTemplateColumns","repeat","gridTemplateRows","children","clueStyle","alignItems","justifyContent","textAlign","Clue","horizontal","transform","width","alt","EdgeWrapper","puzzle","some","v","gridTemplateAreas","gridArea","c","alignContent","fontSize","PuzzleComponent","PuzzleWrapper","getState","setState","newStatus","toggle","PUZZLE_0","PUZZLE_1","PUZZLE_2","PUZZLE_3","PUZZLE_4","PUZZLE_HARD","PUZZLE_0A","dayData","title","description","link","component","Container","Typography","variant","HomePage","day","to","Card","CardContent","NavItem","textDecoration","color","marginLeft","App","AppBar","position","Toolbar","data","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e7ba5851.chunk.js","sourcesContent":["export interface PuzzleState {\n  complete: boolean;\n  enabled: boolean[];\n}\n\nexport interface PuzzleDetails {\n  n: number;\n  colCounts?: number[];\n  rowCounts?: number[];\n  totalActive?: number;\n}\n\nexport default class Puzzle {\n  readonly n: number;\n\n  state: PuzzleState;\n\n  readonly colCounts: number[];\n  readonly rowCounts: number[];\n  readonly totalActive: number;\n\n  constructor(details: PuzzleDetails) {\n    const n = details.n;\n\n    this.n = n;\n\n    this.state = {\n      enabled: Array(n * n).fill(false),\n      complete: false,\n    };\n\n    this.colCounts = details.colCounts || Array(n).fill(-1);\n    this.rowCounts = details.rowCounts || Array(n).fill(-1);\n    // We must check for undefined, not just truthiness as it could be zero\n    this.totalActive = details.totalActive !== undefined\n      ? details.totalActive\n      : -1;\n  }\n\n  isValid(state: PuzzleState): boolean {\n    if (this.totalActive >= 0) {\n      const numActive = state.enabled.reduce((a, b) => a + +b, 0);\n\n      if (numActive !== this.totalActive) {\n        return false;\n      }\n    }\n\n    const colsValid = this.colCounts.every((count, index) => {\n      if (count === -1) return true;\n\n      const inThisCol = state.enabled.filter((_, subIndex) => subIndex % this.n === index);\n      const sum = inThisCol.reduce((a, b) => a + +b, 0);\n\n      return sum === count;\n    });\n\n    if (!colsValid) {\n      return false;\n    }\n\n    const rowsValid = this.rowCounts.every((count, index) => {\n      if (count === -1) return true;\n\n      const inThisRow = state.enabled.slice(index * this.n, (index + 1) * this.n);\n      const sum = inThisRow.reduce((a, b) => a + (+b), 0);\n\n      return sum === count;\n    });\n\n    if (!rowsValid) {\n      return false;\n    }\n\n    return true;\n  }\n\n  getState(): PuzzleState {\n    return this.state;\n  }\n\n  read(i: number, j: number): boolean {\n    const index = i + j * this.n;\n\n    return this.state.enabled[index];\n  }\n\n  toggle(i: number, j: number, status: boolean): PuzzleState {\n    const index = i + j * this.n;\n    const newState = {\n      enabled: this.state.enabled.slice(),\n      complete: false,\n    };\n    newState.enabled[index] = status;\n    newState.complete = this.isValid(newState);\n\n    this.state = newState;\n\n    return this.state;\n  }\n}\n","import React, { CSSProperties, useCallback, useState, useEffect } from 'react';\n\nimport Puzzle, { PuzzleDetails, PuzzleState } from '../../api/puzzle/Puzzle';\n\ninterface ButtonProps {\n  i: number;\n  j: number;\n  onToggle: (newStatus: boolean) => void;\n  status: boolean;\n}\n\nconst CHECKED_IMAGES = [\n  'checked-1.png',\n  'checked-2.png',\n  'checked-3.png',\n].map(s => `${process.env.PUBLIC_URL}/${s}`);\n\nconst UNCHECKED_IMAGES = [\n  'unchecked-1.png',\n  'unchecked-2.png',\n  'unchecked-3.png',\n].map(s => `${process.env.PUBLIC_URL}/${s}`);\n\nfor (const image of CHECKED_IMAGES.concat(UNCHECKED_IMAGES)) {\n  const preload = new Image();\n  preload.src = image;\n}\n\nconst randomImage = (checked: boolean) => {\n  if (checked) {\n    return CHECKED_IMAGES[Math.floor(Math.random() * CHECKED_IMAGES.length)];\n  }\n\n  return UNCHECKED_IMAGES[Math.floor(Math.random() * UNCHECKED_IMAGES.length)];\n}\n\nconst Button = (props: ButtonProps) => {\n  const { status, onToggle } = props;\n  const [img, setImage] = useState(randomImage(status));\n  const [enabled, setEnabled] = useState(false);\n\n  useEffect(() => {\n    setImage(randomImage(status));\n  }, [status]);\n\n  const onClick = useCallback(() => {\n    if (status) {\n      onToggle(false);\n      setEnabled(false);\n    } else if (enabled) {\n      onToggle(true);\n    } else {\n      setEnabled(true);\n    }\n  }, [enabled, onToggle, status]);\n\n  return (\n    <button\n      onClick={onClick}\n      style={{\n        border: '2px solid black',\n        backgroundImage: enabled ? `url(${img})` : '',\n        backgroundColor: 'white',\n        backgroundSize: 'cover',\n        padding: '0',\n      }}\n    />\n  );\n};\n\nconst containerStyle = (n: number): CSSProperties => ({\n  display: 'inline-grid',\n  gridTemplateColumns: '100px '.repeat(n),\n  gridTemplateRows: '100px '.repeat(n),\n  border: '4px solid black',\n});\n\ninterface ButtonContainerProps {\n  n: number;\n  children: React.ReactElement[];\n}\n\nconst ButtonContainer = (props: ButtonContainerProps) => {\n  return (\n    <div style={containerStyle(props.n)}>\n      {props.children}\n    </div>\n  );\n};\n\nconst edgeStyle = (n: number): CSSProperties => ({\n  display: 'inline-grid',\n  gridTemplateRows: `45px ${n * 100 + 8}px`,\n  gridTemplateColumns: `${n * 100 + 8}px 45px`,\n  gridTemplateAreas: '\"top-clues total-count\" \"main-section side-clues\"',\n});\n\nconst clueStyle: CSSProperties = {\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  textAlign: 'center',\n};\n\nconst Clue = (props: { horizontal?: boolean; count: number }) => {\n  const { count, horizontal } = props;\n\n  const style = horizontal ? {\n    transform: 'rotate(90deg)',\n    width: '45px',\n  } : { width: '45px' };\n\n  return (\n    <div style={clueStyle}>\n      {(count >= 0 && count < 7) && (\n        <img\n          alt={`${count} in this ${horizontal ? 'row' : 'column'}`}\n          style={style}\n          src={`${process.env.PUBLIC_URL}/counts/dot-${count}.png`}\n        />\n      )}\n      {(count >= 7) && `${count}`}\n    </div>\n  );\n}\n\nconst EdgeWrapper = (props: { puzzle: Puzzle; children: React.ReactElement }) => {\n  const { children, puzzle } = props;\n\n  const anyEdgeClues = puzzle.colCounts.some(v => v >= 0)\n    || puzzle.rowCounts.some(v => v >= 0);\n  \n  if (!anyEdgeClues && puzzle.totalActive === -1) {\n    return children;\n  }\n\n  return (\n    <div style={edgeStyle(puzzle.n)}>\n      <div style={{\n        gridArea: 'top-clues',\n        display: 'grid',\n        gridTemplateColumns: '100px '.repeat(puzzle.n),\n        justifyContent: 'space-around',\n      }}>\n        {puzzle.colCounts.map((c, index) => (\n          <Clue key={index} count={c} />\n        ))}\n      </div>\n      <div style={{\n        gridArea: 'main-section',\n      }}>\n        {children}\n      </div>\n      <div style={{\n        gridArea: 'side-clues',\n        display: 'grid',\n        gridTemplateRows: '100px '.repeat(puzzle.n),\n        alignContent: 'space-around',\n      }}>\n        {puzzle.rowCounts.map((c, index) => (\n          <Clue key={index} count={c} horizontal />\n        ))}\n      </div>\n      {puzzle.totalActive !== -1 && (\n        <div style={{\n          gridArea: 'total-count',\n          textAlign: 'center',\n          justifyContent: 'center',\n        }}>\n          <strong style={{ fontSize: '2em' }}>\n            {puzzle.totalActive}\n          </strong>\n        </div>\n      )}\n    </div>\n  );\n};\n\ninterface InnerPuzzleProps {\n  onToggle: (i: number, j: number) => (newStatus: boolean) => void;\n  puzzle: Puzzle;\n  state: PuzzleState;\n}\n\nexport const PuzzleComponent = (props: InnerPuzzleProps) => {\n  const { onToggle, puzzle, state } = props;\n\n  return (\n    <EdgeWrapper puzzle={puzzle}>\n      <ButtonContainer n={puzzle.n}>\n        {state.enabled.map((status, index) => {\n          const i = index % puzzle.n,\n            j = Math.floor(index / puzzle.n);\n          \n          return (\n            <Button\n              key={index}\n              status={status}\n              onToggle={onToggle(i, j)}\n              i={index % puzzle.n}\n              j={Math.floor(index / puzzle.n)}\n            />\n          );\n        })}\n      </ButtonContainer>\n    </EdgeWrapper>\n  );\n};\n\ninterface Props {\n  details: PuzzleDetails;\n}\n\nexport const PuzzleWrapper = (props: Props) => {\n  const { details } = props;\n\n  const [puzzle] = useState(new Puzzle(details));\n\n  const [state, setState] = useState<PuzzleState>(puzzle.getState());\n\n  const onToggle = useCallback((i: number, j: number) => (newStatus: boolean) => {\n    setState(puzzle.toggle(i, j, newStatus));\n  }, [puzzle]);\n\n  return (\n    <div style={{\n      backgroundColor: state.complete ? 'hsla(120, 80%, 80%, 50%)' : '',\n      padding: '8px',\n    }}>\n      <PuzzleComponent\n        puzzle={puzzle}\n        onToggle={onToggle}\n        state={state}\n      />\n    </div>\n  )\n}\n","import React from 'react';\n\nimport { Container, Typography } from '@material-ui/core';\nimport { PuzzleWrapper } from '../../components/puzzle/PuzzleComponent';\n\nconst PUZZLE_0 = { n: 3, colCounts: [0,1,0], rowCounts: [0,1,0] };\nconst PUZZLE_1 = { n: 3, colCounts: [1,3,1], rowCounts: [2,2,1] };\nconst PUZZLE_2 = { n: 4, colCounts: [2,4,1,1], rowCounts: [3,2,1,2] };\nconst PUZZLE_3 = { n: 5, colCounts: [3,1,3,3,4], rowCounts: [5,2,4,0,3] };\nconst PUZZLE_4 = { n: 5, colCounts: [1,1,2,4,4], rowCounts: [2,4,3,0,3] };\nconst PUZZLE_HARD = { n: 6, colCounts: [1,2,4,1,0,1], rowCounts: [0,4,2,1,1,1] };\n\nconst TodaysPage = () => {\n  return (\n    <Container>\n      <Typography variant=\"h3\">Day 1</Typography>\n      <p>\n        I'm making a grid-based puzzle and going to add a new idea/mechanic to\n        the puzzles each day to make them more interesting/challenging or add\n        variety etc.\n      </p>\n      <p>\n        Core idea for the puzzle on day 1 is that we have a grid, with a hint\n        about how many \"active\" squares there are in each row/column.\n      </p>\n\n      <Typography variant=\"h4\">Intro Puzzle</Typography>\n      <PuzzleWrapper details={PUZZLE_0} />\n      <p>\n        To signify an active square, click twice to draw a big dot in that\n        square. A single click will mark a square with grey strokes. This\n        counts as the square still being inactive, but can be used as a note\n        that the square is definitely not active during working out the puzzle.\n      </p>\n      <p>\n        I hope the solution to this one is straightforward enough. The\n        background will turn green once the puzzle is solved.\n      </p>\n\n      <Typography variant=\"h4\">Puzzle #1</Typography>\n      <PuzzleWrapper details={PUZZLE_1} />\n      <p>\n        <strong>Note:</strong> These puzzles do not necessarily have unique\n        solutions.\n      </p>\n\n      <Typography variant=\"h4\">Puzzle #2</Typography>\n      <p>Stepping it up to 4 by 4 now.</p>\n      <PuzzleWrapper details={PUZZLE_2} />\n      <br />\n\n      <Typography variant=\"h4\">Puzzle #3</Typography>\n      <p>And on to 5 by 5 just as quickly.</p>\n      <PuzzleWrapper details={PUZZLE_3} />\n      <br />\n\n      <Typography variant=\"h4\">Puzzle #4</Typography>\n      <PuzzleWrapper details={PUZZLE_4} />\n      <br />\n\n      <Typography variant=\"h4\">Final puzzle</Typography>\n      <PuzzleWrapper details={PUZZLE_HARD} />\n      <br />\n    </Container>\n  )\n};\n\nexport default TodaysPage;\n","import React from 'react';\n\nimport { Container, Typography } from '@material-ui/core';\nimport { PuzzleWrapper } from '../../components/puzzle/PuzzleComponent';\n\nconst PUZZLE_0 = { n: 3, colCounts: [0,1,0], rowCounts: [0,-1,-1] };\nconst PUZZLE_0A = { n: 3, colCounts: [0,1,-1], rowCounts: [-1,0,-1], totalActive: 2 };\nconst PUZZLE_1 = { n: 3, colCounts: [2,0,-1], rowCounts: [1,-1,1] };\nconst PUZZLE_2 = { n: 3, colCounts: [2,0,-1], rowCounts: [1,-1,1], totalActive: 3 };\n\nconst TodaysPage = () => {\n  return (\n    <Container>\n      <Typography variant=\"h3\">Day 2</Typography>\n      <p>\n        Let's add a little variety to the very simple concept introduced\n        yesterday.\n      </p>\n      <p>\n        What if we don't know exactly how many active squares are in some of\n        the rows and columns?\n      </p>\n\n      <Typography variant=\"h4\">Intro Puzzle</Typography>\n      <PuzzleWrapper details={PUZZLE_0} />\n      <p>\n        <strong>Note:</strong> There is a difference between the empty circle\n        and no marking at all.\n      </p>\n      <p>\n        Not too bad yet, I hope.\n      </p>\n\n      <Typography variant=\"h4\">Intro Puzzle #2</Typography>\n      <p>\n        What if we also know how many active squares are in the puzzle <strong>\n        in total</strong>?\n      </p>\n      <PuzzleWrapper details={PUZZLE_0A} />\n      <p>\n          I guess that adds a bit of interest to the scenario.\n      </p>\n\n      <Typography variant=\"h4\">Puzzle #1</Typography>\n      <p>Let's do some puzzles now.</p>\n      <PuzzleWrapper details={PUZZLE_1} />\n      <br />\n\n      <Typography variant=\"h4\">Puzzle #2</Typography>\n      <p>Does one more change things?</p>\n      <PuzzleWrapper details={PUZZLE_2} />\n      <p>\n        Interestingly, there are still more solutions to even this puzzle than\n        I thought at first.\n      </p>\n\n      <p>\n        I haven't had time yet to get to making more interesting puzzles than\n        this yet. I may add some later today. (A lot of my time was spent\n        making this site)\n      </p>\n    </Container>\n  )\n};\n\nexport default TodaysPage;\n","import Day1 from './day1';\nimport Day2 from './day2';\n\ninterface DayInfo {\n  title: string;\n  description?: string;\n  link: string;\n  component: React.ReactNode;\n}\n\nexport const dayData: DayInfo[] = [\n  {\n    title: 'Day 1: the beginning',\n    description: 'The first day',\n    link: '/days/1',\n    component: Day1,\n  },\n  {\n    title: 'Day 2: some variation',\n    description: 'Adding a little variety/ambiguity',\n    link: '/days/2',\n    component: Day2,\n  }\n];\n","import React from 'react';\n\nimport { Card, CardContent, Container, Typography } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\n\nimport { dayData } from '../days';\n\nconst HomePage = () => {\n  return (\n    <Container>\n      <Typography variant=\"h3\">Grid puzzles website</Typography>\n      <p>Hopefully the home of some interesting puzzles.</p>\n      {dayData.map(day => (\n        <Link key={day.link} to={day.link}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h5\">{day.title}</Typography>\n              {day.description && (<p>{day.description}</p>)}\n            </CardContent>\n          </Card>\n        </Link>\n      ))}\n    </Container>\n  )\n};\n\nexport default HomePage;\n","import React from 'react';\n\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link,\n} from 'react-router-dom';\n\nimport { AppBar, Toolbar, Typography } from '@material-ui/core';\n\nimport HomePage from './pages/homepage';\nimport { dayData } from './pages/days';\n\nconst NavItem = (props: { children: React.ReactChild, to: string }) => {\n  return (\n    <Link to={props.to} style={{ textDecoration: 'none', color: 'white', marginLeft: '20px' }}>\n      <Typography variant=\"button\">\n        {props.children}\n      </Typography>\n    </Link>\n  );\n}\n\nfunction App() {\n  return (\n    <Router>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h5\">\n            Grid Puzzle\n          </Typography>\n          <NavItem to=\"/\">Home</NavItem>\n          <NavItem to={dayData[dayData.length - 1].link}>Today</NavItem>\n        </Toolbar>\n      </AppBar>\n      <Switch>\n        {dayData.map((data, index) => (\n          <Route key={index} path={data.link}>\n            {data.component}\n          </Route>\n        ))}\n        <Route path=\"/\">\n          <HomePage />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}